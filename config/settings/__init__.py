"""
Django settings for bookmarks project.

Generated by 'cookiecutter'
https://github.com/cookiecutter/cookiecutter
from 'cookiecutter-django2-simplest' template
https://github.com/mk-dv/cookiecutter-django-2-simplest/
using Django 2.2.17.

For more information on this package, see:
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import dynaconf
from pathlib import Path


# -----------------------------------------------------------------------------
# Monkey patch adds a `@path` cast that equivalent `@jinja` but returns
# `pathlib.Path` object.
class PathFormatter:
    def __init__(self, function, token):
        self.function = function
        self.token = token

    def __call__(self, value, **context):
        self.function(value, **context)
        return Path(self.function(value, **context))

    def __str__(self):
        return str(self.token)


# Dynaconf template substitution bug fix.

def recursively_evaluate_lazy_format(value, settings):  # noqa
    """Given a value as a data structure, traverse all its members
    to find Lazy values and evaluate it.

    For example: Evaluate values inside lists and dicts

    ---
    In the original implementation, this function evaluates all Lazy objects in
     nested lists, although a parser (such as YAML) returns dictionaries as
     well.
    """

    if getattr(value, "_dynaconf_lazy_format", None):
        value = value(settings)

    if isinstance(value, list):
        # Keep the original type, can be a BoxList
        value = value.__class__(
            [
                recursively_evaluate_lazy_format(item, settings)
                for item in value
            ]  # noqa
        )
    # Bug fix: evaluate Lazy in dicts.
    if isinstance(value, dict):
        value = value.__class__(
            {
                key: recursively_evaluate_lazy_format(val, settings)
                for key, val in value.items()
            }  # noqa
        )
    return value


# Bug fix:
# Mininal reproduce example:
# settings.yaml:
#     default:
#     BASE: 'hello'
#     FORMATTED: '@jinja {{this.BASE}}'
#
#     OUTER:
#     - NESTED_FORMATTED: '@jinja {{this.BASE}}'
#
# in code:
#     from django.conf import settings
#
#     settings.FORMATTED >> 'hello'
#     settings.OUTER[0]['NESTED_FORMATTED'] >> '@jinja {{this.BASE}}'


def evaluate_if_lazy(value):
    if isinstance(value, dynaconf.utils.parse_conf.Lazy):  # noqa
        return recursively_evaluate_lazy_format(value, value.settings)
    return value


def path_converter(value):
    return dynaconf.utils.parse_conf.Lazy(  # noqa
        value,
        formatter=PathFormatter(
            dynaconf.utils.parse_conf._jinja_formatter,  # noqa
            'jinja'
        )
    )

# Evaluate `Lazy` objects before rendering string.
dynaconf.utils.parse_conf.jinja_env.finalize=evaluate_if_lazy  # noqa

dynaconf.utils.parse_conf.converters['@path'] = path_converter  # noqa

dynaconf.utils.recursively_evaluate_lazy_format = (  # noqa
    recursively_evaluate_lazy_format
)
# -----------------------------------------------------------------------------

# HERE STARTS DYNACONF EXTENSION LOAD (Keep at the very bottom of other
# settings).
# Read more at https://www.dynaconf.com/#using-django
settings = dynaconf.DjangoDynaconf(
    __name__,
    ENVVAR_PREFIX_FOR_DYNACONF='BOOKMARKS',
    CORE_LOADERS=['YAML'],
    ENV_SWITCHER_FOR_DYNACONF='BOOKMARKS_ENV',
    # Load this files in the order.
    SECRETS=['.secrets.yaml'],
    settings_files=['base.yaml', 'development.yaml', 'production.yaml'],
)
# HERE ENDS DYNACONF EXTENSION LOAD (No more code below this line)
